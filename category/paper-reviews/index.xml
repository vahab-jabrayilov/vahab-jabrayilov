<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Paper Reviews | Vahab Jabrayilov</title><link>https://vjabrayilov.github.io/category/paper-reviews/</link><atom:link href="https://vjabrayilov.github.io/category/paper-reviews/index.xml" rel="self" type="application/rss+xml"/><description>Paper Reviews</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 18 Jul 2023 00:00:00 +0000</lastBuildDate><image><url>https://vjabrayilov.github.io/media/icon_hufdc9ffe2c12a5bb5ad2cfdfce17ddfaa_56068_512x512_fill_lanczos_center_3.png</url><title>Paper Reviews</title><link>https://vjabrayilov.github.io/category/paper-reviews/</link></image><item><title>Granular Computing</title><link>https://vjabrayilov.github.io/granularcomputing/</link><pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/granularcomputing/</guid><description>&lt;h2 id="review">Review&lt;/h2>
&lt;p>This paper is by the group of John Ousterhout and introduces the concept of so called “Granular computing”. They define “Granular computing” as the collection of very short-lived (10-100 usecs) tasks. The other main properties are large scale(1k-1M cooperating tasks) and short bursts(1-10 msecs of activity). Authors discuss the challenges coming with the new concept and present a few initial ideas about the required infrastructure to support it.&lt;/p>
&lt;p>In granular computing, applications are composed of a very large number of small tasks running in microsecond scale both in parallel and sequentially, spread across thousands of machines. In addition, they are bursty, harnessing thousands of machines for just a few intense milliseconds of computation. In today’s software systems, overheads are too high to support small tasks efficiently or to scale up and down rapidly. Precisely, granular computing requires software infrastructure that operates at microsecond scale, but today’s systems are designed for millisecond scale.&lt;/p>
&lt;p>Authors defend an extreme approach over an incremental one, which will stimulate innovative design thinking. They introduce real-time data-intensive processing and micro-lambdas as two classes of applications which can be possible by granular computing. It is argued that granular computing will enable real-time data-intensive processing to have smaller latency overhead for invoking requests and higher degree of concurrency. Regarding micro lambdas, it will support tasks three orders of magnitude smaller and will allow lambdas to work together by communicating.&lt;/p>
&lt;p>Low latency is one of the major challenges to overcome. Granular computing will require extremely low latency in task initiation and network communication. It shouldn’t take more than 1 usec to invoke a single task and 100 usecs to initiate tasks in the burst. Microsecond-scale network communication is essential both for fast burst startup and communication among short-lived tasks. Particularly, tail latency matters, since it is difficult to optimize and eliminate infrequent sources of overhead.&lt;/p>
&lt;p>Extreme bursts require to start very quickly by communicating with many servers in parallel and allocate resources on them. The second challenge here is resource utilization. In order to use resources efficiently, non-bursty background tasks must be run during the lulls between bursts, and the system must be able to preempt them very quickly at the start of the next burst.&lt;/p>
&lt;p>Below mentioned overheads show why it is not possible to support granular computing with existing systems:&lt;/p>
&lt;ul>
&lt;li>Creating a thread on Linux takes 10 usecs&lt;/li>
&lt;li>A network RTT between two servers in the same datacenter can take 500 usecs or more when the network is loaded&lt;/li>
&lt;li>Spinning up a Linux container takes hundreds of milliseconds&lt;/li>
&lt;li>Initiating a job that spans a few hundred nodes with Spark, Kubernetes or AWS Lambda can take one second or more.&lt;/li>
&lt;/ul>
&lt;p>Authors mention two major causes of these overheads. First, existing software infrastructure was designed to operate at a millisecond scale, not microsecond. The assumption of disk-based storage permeates much of the design of today’s software. A second problem is high layering. Each layer crossing adds overhead. Granular computing will require a significant re-architecture of the software stack to eliminate layers or bypass them.&lt;/p>
&lt;p>Service concept is introduced as a granular computing unit, which can be either stateless or stateful. This separation based on state helps the underlying infrastructure to leverage its resources efficiently. They also propose two kinds of addressing that will raise the level of abstractions for network communication: service-based addressing and resource-based addressing. In service-based addressing, communication is directed at a particular service, and the infrastructure can load-balance the requests across the service’s instances. It is most appropriate for stateless services. In resource-based addressing, communication is directed to a particular resource, such as a piece of data with a particular data in a key-value store. It makes sense for stateful services. Authors also emphasize the need for efficient group communication with the higher-level addressing mechanisms they propose. Handling bursts are more complex and require sophisticated mechanisms to preempt resources from long running tasks, to isolate short-lived tasks efficiently. Moreover, keeping warm pools to reduce service latency would be unmanageable for large numbers of small tasks since they consume idle resources. Regarding persistence, they favor use of emerging nonvolatile memories or enforcing persistence only occasionally. But the latter isn’t trivial and may require assistance from applications.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://dl.acm.org/doi/pdf/10.1145/3317550.3321447" target="_blank" rel="noopener">Granular Computing&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Go Serverless: Securing Cloud via Serverless Design Patterns</title><link>https://vjabrayilov.github.io/post/serverlessdesignpatterns/</link><pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/post/serverlessdesignpatterns/</guid><description>&lt;h2 id="review">Review&lt;/h2>
&lt;p>Authors have a security background and paper aims at utilizing serverless design patterns in security applications. They solely focus on AWS Lambda, and assume that all the responsibility to secure lambda execution lies on the cloud provider. However, customers are also responsible to secure their communication. They briefly describe six design patterns and how one can use them to develop a security oriented application.&lt;/p>
&lt;p>&lt;strong>Periodic Invocation Pattern&lt;/strong> represents the kind of models that invoke lambda functions periodically by using schedulers. Each function carries out a simple task and reports the execution results to notification channels.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/02f5a2e9-9533-445d-829a-c1a7d700859a/Screenshot_from_2022-09-06_14-27-53.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220906%2Fus-west-2%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20220906T112230Z&amp;amp;X-Amz-Expires=86400&amp;amp;X-Amz-Signature=044ec7568fb7a8a9f2f283d272d2dd4acd85998bc0e780e707f9a237cbe85cb0&amp;amp;X-Amz-SignedHeaders=host&amp;amp;response-content-disposition=filename%20%3D%22Screenshot%2520from%25202022-09-06%252014-27-53.png%22&amp;amp;x-id=GetObject" alt="img1" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>Event-Driven Pattern&lt;/strong> is where a set of lambda functions subscribe to events from cloud resources. These events trigger the execution of the subscribed lambda function passing the necessary context. It minimizes the cost by invoking lambda functions only when an event occurs and functions scale automatically based on the number of events, providing a scalable design.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/fabec05c-daa5-4473-9127-5138927928aa/Screenshot_from_2022-09-06_14-28-20.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220906%2Fus-west-2%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20220906T112316Z&amp;amp;X-Amz-Expires=86400&amp;amp;X-Amz-Signature=e27f03ead60903ecf5afd8b54a269458f073cdc48ffb2f97bd802e34c0fc6c27&amp;amp;X-Amz-SignedHeaders=host&amp;amp;response-content-disposition=filename%20%3D%22Screenshot%2520from%25202022-09-06%252014-28-20.png%22&amp;amp;x-id=GetObject" alt="img2" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>Data Transformation Pattern.&lt;/strong> The ETL(extract-transform-load) data processing pipelines usually requires three steps: 1) extract data from a data source, 2) transform data by using frameworks such as Apache Spark or Flink, 3) load the transformed data into a database. Using lambda architecture, data processing tasks can be implemented as lambda functions.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/0f78fc8d-e13c-4097-8bf1-77332e538605/Screenshot_from_2022-09-06_14-28-04.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220906%2Fus-west-2%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20220906T112334Z&amp;amp;X-Amz-Expires=86400&amp;amp;X-Amz-Signature=fbbc6314227bd623be35efd53ca4733f7a071e6479e3b26382f501dfa013622f&amp;amp;X-Amz-SignedHeaders=host&amp;amp;response-content-disposition=filename%20%3D%22Screenshot%2520from%25202022-09-06%252014-28-04.png%22&amp;amp;x-id=GetObject" alt="img3" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>Data Streaming Pattern.&lt;/strong> A lambda function sits in the path of the data stream and functions either as an aggregator or data partitioner. For example, a lambda can separate an incoming data stream into multiple streams(partition) or merge several incoming streams into one large data stream(aggregation).&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/e4d287b2-b415-475b-b317-3ec3d679d784/Screenshot_from_2022-09-06_14-28-27.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220906%2Fus-west-2%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20220906T112424Z&amp;amp;X-Amz-Expires=86400&amp;amp;X-Amz-Signature=55bdc34986556eb7277dc48d88ae9a232c4ceeb24e560ab8dbf273987d00ad8b&amp;amp;X-Amz-SignedHeaders=host&amp;amp;response-content-disposition=filename%20%3D%22Screenshot%2520from%25202022-09-06%252014-28-27.png%22&amp;amp;x-id=GetObject" alt="img4" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>State Machine Pattern&lt;/strong> enables building a complex, stateful procedure by coordinating a collection of discrete Lambda functions using a tool such as AWS Step Functions. It shouldn’t scale the entire pattern as tasks defined for each state can be scaled up/down individually, Furthermore, the state machine offers a try/catch mechanism so that different or the same functions can be invoked depending on the failure reason.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/401e5618-bacf-485a-96fc-abaaf51434ae/Screenshot_from_2022-09-06_14-28-49.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220906%2Fus-west-2%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20220906T112600Z&amp;amp;X-Amz-Expires=86400&amp;amp;X-Amz-Signature=1d396cf33d4e529556f352fbb586328b98f7e8a7450ccae47770030866b85881&amp;amp;X-Amz-SignedHeaders=host&amp;amp;response-content-disposition=filename%20%3D%22Screenshot%2520from%25202022-09-06%252014-28-49.png%22&amp;amp;x-id=GetObject" alt="img5" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>Bundled Pattern&lt;/strong> combines two or more of the previously described patterns together by easily passing events sequentially between them. It resembles UNIX pipelines, where each function is small, precise and does one thing, but true power comes from chaining these together.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/fc8aa752-ef51-453f-a570-3b4485f4b24c/Screenshot_from_2022-09-06_14-28-33.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220906%2Fus-west-2%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20220906T112614Z&amp;amp;X-Amz-Expires=86400&amp;amp;X-Amz-Signature=e27314a11b27d0a8f1eda160733388842ce62fece1595ef21542426424c095b0&amp;amp;X-Amz-SignedHeaders=host&amp;amp;response-content-disposition=filename%20%3D%22Screenshot%2520from%25202022-09-06%252014-28-33.png%22&amp;amp;x-id=GetObject" alt="img6" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Authors show the time to start a lambda function(50-100ms) as a primary disadvantage. But lower prices for short running functions and better scalability are advantages.&lt;/p>
&lt;p>In later sections of the paper they describe a threat intelligence platform built upon the above mentioned design patterns, which is not interesting for our purpose.&lt;/p>
&lt;p>Authors also discuss some restrictions of current lambda design and offer possible solutions. Time bound execution is highlighted as one of the resource constraints and it can be avoided by splitting the original task across the multiple executions, but it is not possible for all workloads. They describe a proper solution as to either increase the execution time or to automatically pass state between executions so that the task can continue in another execution with the previous state. Lambda also suffers from lack of computing power. They argue that it would be better to have CPU limits configurable and support for GPUs in AWS Lambda. Moreover, lack of event tracing is emphasized by the authors.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.usenix.org/conference/hotcloud18/presentation/hong" target="_blank" rel="noopener">Go Serverless: Securing Cloud via Serverless Design Patterns&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Metastable Failures in Distributed Systems</title><link>https://vjabrayilov.github.io/post/metastablefailures/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/post/metastablefailures/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;ul>
&lt;li>Interestingly, most features improving the efficiency or reliability are the main cause of &lt;em>metastable failures&lt;/em>.&lt;/li>
&lt;li>Trigger causes the open system (with an unctrolled source of load) to enter a &lt;strong>bad state&lt;/strong> persisting even after the removal of the trigger.&lt;/li>
&lt;li>Failures that are &lt;strong>resolved when the trigger is removed&lt;/strong> are not metastable.&lt;/li>
&lt;li>Recovery requires &lt;em>a strong corrective push&lt;/em>, e.g. rebooting or dramatically reducing the load.&lt;/li>
&lt;li>Lifecycle of a metastable failure:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> load rises trigger
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stable state ------------&amp;gt; vulnerable state --------&amp;gt; metastable state
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (still healthy)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>the vulnerable state is not an overloaded state; system can run for a long time here; but can get stuck in &lt;em>metastable state&lt;/em> w/o any increase in the load.&lt;/li>
&lt;li>interestingly most production systems prefers the vulnerable state since it has higher efficiency than the stable state.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;em>Feedback loop&lt;/em> sustains the failure until a corrective action is applied.&lt;/li>
&lt;/ul>
&lt;h2 id="case-studies">Case studies&lt;/h2>
&lt;ul>
&lt;li>Request Retries
&lt;ul>
&lt;li>Results in work amplification&lt;/li>
&lt;li>Consider a web application with db. Initially, system operates normally while load is just below a certain threshold. After a temporary network outage occurs and restores, retries are sent and this surge overloads the db. Overloaded db timeouts the upcoming queries and system will remain in metastable state untill the load is significantly reduced or timeout(retry) policy of db query changed.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Look-aside Cache
&lt;ul>
&lt;li>If cache is lost in the vulnerable state, db will be pushed to overloaded state. Cache will remain empty, system is trapped in metastable failure state;
&lt;ul>
&lt;li>low cache hit -&amp;gt; slow db response -&amp;gt; prevents filling the cache&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Slow Error Handling
&lt;ul>
&lt;li>Error handling has its cost and it can be a significant cost&lt;/li>
&lt;li>Trigger causes the system to run out of the resources used by error handling code, and error handling will make the shortage more severe.&lt;/li>
&lt;li>&lt;strong>??? &amp;ndash; to think&lt;/strong> Is the following considered? &amp;ndash;&amp;gt; An error occurs(like wrong input), error handling code makes the resources to run out, normal operations are deprived of resources resulting in additional errors(exceptions), which draw the system to a metastable state.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Link Imbalance
&lt;ul>
&lt;li>a very interesting and solid example; both requiring network and application layer collaboration to fix&lt;/li>
&lt;li>a complex and well designed hashing algorithm routes the requests; but the cache miss of a single shard in the application level increases the requests to the db. There is a connection pool with MRU policy, each spike of misses reaarranges the connection pool so that highest latency links are at the top and they will be used; resulting in further congestion.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="approaches-to-handling-metastability">Approaches to Handling Metastability&lt;/h2>
&lt;ul>
&lt;li>Trigger vs Root Cause: Sustaining feedback loop is the root cause rather than the trigger itself. Different triggers can result in the same failure state; hence solution is to address the sustaining effect.&lt;/li>
&lt;li>Change of Policy during Overload: e.g., make some failing requests to succeed.&lt;/li>
&lt;li>Prioritization: e.g., give priority to retries requests rather than new ones.&lt;/li>
&lt;li>Stress tests &lt;strong>TODO: read the Kraken paper&lt;/strong>&lt;/li>
&lt;li>Organizational incentives&lt;/li>
&lt;li>Fast Error Paths&lt;/li>
&lt;li>Outlier Hygiene: same root cause can manfiest earlier as latency outlier or a cluster of errrors.&lt;/li>
&lt;li>Autoscaling&lt;/li>
&lt;/ul>
&lt;h2 id="research-directions">Research Directions&lt;/h2>
&lt;ul>
&lt;li>2 main goals:
&lt;ul>
&lt;li>designing systems that avoid metastable failures while operating efficiently&lt;/li>
&lt;li>developing mechanisms to recover from metastable failures as quickly as possible in cases that cannot be avoided&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Try to weaken the strongest feedback loops, discover about characteristic metric, using them generate warning signs;&lt;/li>
&lt;li>Learning the hidden capacity of the underlying system can help to take preventive actions.&lt;/li>
&lt;/ul>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://sigops.org/s/conferences/hotos/2021/papers/hotos21-s11-bronson.pdf" target="_blank" rel="noopener">https://sigops.org/s/conferences/hotos/2021/papers/hotos21-s11-bronson.pdf&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>