<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vahab Jabrayilov</title><link>https://vjabrayilov.github.io/</link><atom:link href="https://vjabrayilov.github.io/index.xml" rel="self" type="application/rss+xml"/><description>Vahab Jabrayilov</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 24 Oct 2022 00:00:00 +0000</lastBuildDate><image><url>https://vjabrayilov.github.io/media/icon_hufdc9ffe2c12a5bb5ad2cfdfce17ddfaa_56068_512x512_fill_lanczos_center_3.png</url><title>Vahab Jabrayilov</title><link>https://vjabrayilov.github.io/</link></image><item><title>Example Talk</title><link>https://vjabrayilov.github.io/talk/example-talk/</link><pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/talk/example-talk/</guid><description>&lt;div class="alert alert-note">
&lt;div>
Click on the &lt;strong>Slides&lt;/strong> button above to view the built-in slides feature.
&lt;/div>
&lt;/div>
&lt;p>Slides can be added in a few ways:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Create&lt;/strong> slides using Wowchemy&amp;rsquo;s &lt;a href="https://wowchemy.com/docs/managing-content/#create-slides" target="_blank" rel="noopener">&lt;em>Slides&lt;/em>&lt;/a> feature and link using &lt;code>slides&lt;/code> parameter in the front matter of the talk file&lt;/li>
&lt;li>&lt;strong>Upload&lt;/strong> an existing slide deck to &lt;code>static/&lt;/code> and link using &lt;code>url_slides&lt;/code> parameter in the front matter of the talk file&lt;/li>
&lt;li>&lt;strong>Embed&lt;/strong> your slides (e.g. Google Slides) or presentation video on this page using &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">shortcodes&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Further event details, including &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">page elements&lt;/a> such as image galleries, can be added to the body of this page.&lt;/p></description></item><item><title>An Empirical Analysis of IDS Approaches in Container Securityr</title><link>https://vjabrayilov.github.io/publication/conference-paper/</link><pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/publication/conference-paper/</guid><description>&lt;!--
&lt;div class="alert alert-note">
&lt;div>
Click the &lt;em>Cite&lt;/em> button above to demo the feature to enable visitors to import publication metadata into their reference management software.
&lt;/div>
&lt;/div>
&lt;div class="alert alert-note">
&lt;div>
Create your slides in Markdown - click the &lt;em>Slides&lt;/em> button to check out the example.
&lt;/div>
&lt;/div>
Supplementary notes can be added here, including [code, math, and images](https://wowchemy.com/docs/writing-markdown-latex/). --></description></item><item><title>GSoC Final Submission Thanos</title><link>https://vjabrayilov.github.io/post/gsoc/</link><pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/post/gsoc/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>The main goal was to support on the fly compaction of TSDB blocks without using any disk space or constant amount of the disk space. As analyzing, I came across with the following challenges:&lt;/p>
&lt;ul>
&lt;li>TSDB blocks have a special structure and the main challenge stems from already big size of a single block.&lt;/li>
&lt;li>&lt;code>compactor&lt;/code> module is written such that it operates on the already downloaded blocks, so nothing to be done here.&lt;/li>
&lt;li>Initially, I had proposed to have a partial upload and download to accomodate a single download and upload problem, but I identified that downloading dependency (&lt;code>minio&lt;/code>) already employs it.&lt;/li>
&lt;/ul>
&lt;h2 id="analysis">Analysis&lt;/h2>
&lt;p>I moved to analyze the whole codebase, and with the help of my supervisor we identified &lt;code>BucketReader&lt;/code> interface which is responsible for read access to an object storage bucket and all the other cloud provider support modules are implementing it. My supervisor suggested to imlement a new and scratch version of it which uses a streaming behavior. To be precise, it should bring chunks based on the read index and compact on chunk basis. Howevere, it is not a trivial thing and requires an in depth analysis of TSDB block structure and needs a planning mechanism wo bring which chunks and when to stop bringing. Since, the system is widely used in production, it should be well tested and shouldn;t result in data loss, hence increasing the complexity. So, we decided to take time to in depth analyze the above mentioned problems and come up with a strategy,&lt;/p>
&lt;p>&lt;code>BucketReader&lt;/code> consists of &lt;code>Iter&lt;/code>, &lt;code>Get&lt;/code>, &lt;code>GetRange&lt;/code>, &lt;code>Exists&lt;/code> &lt;code>IsObjNotFoundErr&lt;/code> and &lt;code>Attributes&lt;/code> functions. In more detail,&lt;/p>
&lt;ul>
&lt;li>&lt;code>Iter&lt;/code> calls a given function in the bucket directory passing the entries to the function.&lt;/li>
&lt;li>&lt;code>Get&lt;/code> provides a reader for the object&lt;/li>
&lt;li>&lt;code>GetRange&lt;/code> provides a range reader similar to &lt;code>Get&lt;/code>&lt;/li>
&lt;li>&lt;code>Exists&lt;/code> checks whether the object exists in the bucket or not&lt;/li>
&lt;li>&lt;code>IsObjNotFoundErr&lt;/code> returns true if object is not found in the bucket&lt;/li>
&lt;li>&lt;code>Attributes&lt;/code> gives information about the specified object&lt;/li>
&lt;/ul>
&lt;p>TSDB blocks consists of the head block and following N blocks. Each incoming time-series data point comes to the Head block and stays there, when all of them get old enough they are persisted in the disk as a separate block. WAL and mmap coordinates this process, but only the head and 1&amp;hellip;N blocks are interested in case of compaction, since onlythey are resided in the object storage.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./tsdb.png" alt="tsdb-block" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Every block has a unique identifier, called a &lt;code>Universally Unique Lexicographically Sortable Identifier(ULID)&lt;/code>. A block has 4 constituent parts:&lt;/p>
&lt;ul>
&lt;li>&lt;code>meta.json&lt;/code> &amp;ndash;&amp;gt; the medatadata about the block&lt;/li>
&lt;li>&lt;code>chunks&lt;/code> &amp;ndash;&amp;gt; raw chunks&lt;/li>
&lt;li>&lt;code>index&lt;/code> &amp;ndash;&amp;gt; index of the block&lt;/li>
&lt;li>&lt;code>tombstones&lt;/code> &amp;ndash;&amp;gt; marker holding info whether the samples are deleted or not&lt;/li>
&lt;/ul>
&lt;p>Only chunks is directory, other three are regular files.&lt;/p>
&lt;p>&lt;code>meta.json&lt;/code> has the following structure:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ulid&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;01EM6Q6A1YPX4G9TEB20J22B2R&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;minTime&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1602237600000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;maxTime&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1602244800000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;stats&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;numSamples&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">553673232&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;numSeries&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1346066&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;numChunks&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">4440437&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;compaction&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;level&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;sources&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;01EM65SHSX4VARXBBHBF0M0FDS&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;01EM6GAJSYWSQQRDY782EA5ZPN&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>chunks&lt;/code> directory has numbered files each representing a separate chunk and has a size of &lt;code>512 MiB&lt;/code>.&lt;/p>
&lt;p>Planning phase of the compaction decides which blocks to compact. In our case, we should read the relevant block metadata and do planning based upon them. Since, metadata files are small in size reading several of them will not incur that much cost. With the new modified planning phase, we can decid upon which blocks are of interest for the current compaction stage and stream the chunks of those blocks in parallel. Reading those streams, one can compact and create new chunks in memory(it may also be mmap-ed file in disk). When the newly created chunks of the block reach some size it can be uploaded to object storage.&lt;/p>
&lt;p>Unfortunately, regarding time constraints and implementation complextiy, the result of above analysis is not completely ready. I plan to incremenetally implement by learning best practices. By analyizng the &lt;code>Thanos&lt;/code> code base I get the good grasp of best practices of &lt;code>Go&lt;/code> programming language and learned lots of unknown features to me. I believe those will help me to implement the result of analysis.&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements&lt;/h2>
&lt;p>To sum up, GSoC was a good experience to learn, develop and be a part of larger open source community. Despite the fact that project was challenging, I learned a lot about time series databases, cloud object storage, and &lt;code>Go&lt;/code> programming language. I would like to especially thank &lt;code>Ben Ye&lt;/code> for his constant support and inspiration, and all &lt;code>Thanos&lt;/code> community. Moreover, I would like to express my gratitude to all the folks in &lt;code>Google&lt;/code> making the &lt;code>Google Summer of Code&lt;/code> and inspiring newbies in the open source.&lt;/p></description></item><item><title>Go Serverless: Securing Cloud via Serverless Design Patterns</title><link>https://vjabrayilov.github.io/post/serverlessdesignpatterns/</link><pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/post/serverlessdesignpatterns/</guid><description>&lt;h2 id="review">Review&lt;/h2>
&lt;p>Authors have a security background and paper aims at utilizing serverless design patterns in security applications. They solely focus on AWS Lambda, and assume that all the responsibility to secure lambda execution lies on the cloud provider. However, customers are also responsible to secure their communication. They briefly describe six design patterns and how one can use them to develop a security oriented application.&lt;/p>
&lt;p>&lt;strong>Periodic Invocation Pattern&lt;/strong> represents the kind of models that invoke lambda functions periodically by using schedulers. Each function carries out a simple task and reports the execution results to notification channels.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/02f5a2e9-9533-445d-829a-c1a7d700859a/Screenshot_from_2022-09-06_14-27-53.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220906%2Fus-west-2%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20220906T112230Z&amp;amp;X-Amz-Expires=86400&amp;amp;X-Amz-Signature=044ec7568fb7a8a9f2f283d272d2dd4acd85998bc0e780e707f9a237cbe85cb0&amp;amp;X-Amz-SignedHeaders=host&amp;amp;response-content-disposition=filename%20%3D%22Screenshot%2520from%25202022-09-06%252014-27-53.png%22&amp;amp;x-id=GetObject" alt="img1" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>Event-Driven Pattern&lt;/strong> is where a set of lambda functions subscribe to events from cloud resources. These events trigger the execution of the subscribed lambda function passing the necessary context. It minimizes the cost by invoking lambda functions only when an event occurs and functions scale automatically based on the number of events, providing a scalable design.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/fabec05c-daa5-4473-9127-5138927928aa/Screenshot_from_2022-09-06_14-28-20.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220906%2Fus-west-2%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20220906T112316Z&amp;amp;X-Amz-Expires=86400&amp;amp;X-Amz-Signature=e27f03ead60903ecf5afd8b54a269458f073cdc48ffb2f97bd802e34c0fc6c27&amp;amp;X-Amz-SignedHeaders=host&amp;amp;response-content-disposition=filename%20%3D%22Screenshot%2520from%25202022-09-06%252014-28-20.png%22&amp;amp;x-id=GetObject" alt="img2" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>Data Transformation Pattern.&lt;/strong> The ETL(extract-transform-load) data processing pipelines usually requires three steps: 1) extract data from a data source, 2) transform data by using frameworks such as Apache Spark or Flink, 3) load the transformed data into a database. Using lambda architecture, data processing tasks can be implemented as lambda functions.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/0f78fc8d-e13c-4097-8bf1-77332e538605/Screenshot_from_2022-09-06_14-28-04.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220906%2Fus-west-2%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20220906T112334Z&amp;amp;X-Amz-Expires=86400&amp;amp;X-Amz-Signature=fbbc6314227bd623be35efd53ca4733f7a071e6479e3b26382f501dfa013622f&amp;amp;X-Amz-SignedHeaders=host&amp;amp;response-content-disposition=filename%20%3D%22Screenshot%2520from%25202022-09-06%252014-28-04.png%22&amp;amp;x-id=GetObject" alt="img3" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>Data Streaming Pattern.&lt;/strong> A lambda function sits in the path of the data stream and functions either as an aggregator or data partitioner. For example, a lambda can separate an incoming data stream into multiple streams(partition) or merge several incoming streams into one large data stream(aggregation).&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/e4d287b2-b415-475b-b317-3ec3d679d784/Screenshot_from_2022-09-06_14-28-27.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220906%2Fus-west-2%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20220906T112424Z&amp;amp;X-Amz-Expires=86400&amp;amp;X-Amz-Signature=55bdc34986556eb7277dc48d88ae9a232c4ceeb24e560ab8dbf273987d00ad8b&amp;amp;X-Amz-SignedHeaders=host&amp;amp;response-content-disposition=filename%20%3D%22Screenshot%2520from%25202022-09-06%252014-28-27.png%22&amp;amp;x-id=GetObject" alt="img4" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>State Machine Pattern&lt;/strong> enables building a complex, stateful procedure by coordinating a collection of discrete Lambda functions using a tool such as AWS Step Functions. It shouldn’t scale the entire pattern as tasks defined for each state can be scaled up/down individually, Furthermore, the state machine offers a try/catch mechanism so that different or the same functions can be invoked depending on the failure reason.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/401e5618-bacf-485a-96fc-abaaf51434ae/Screenshot_from_2022-09-06_14-28-49.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220906%2Fus-west-2%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20220906T112600Z&amp;amp;X-Amz-Expires=86400&amp;amp;X-Amz-Signature=1d396cf33d4e529556f352fbb586328b98f7e8a7450ccae47770030866b85881&amp;amp;X-Amz-SignedHeaders=host&amp;amp;response-content-disposition=filename%20%3D%22Screenshot%2520from%25202022-09-06%252014-28-49.png%22&amp;amp;x-id=GetObject" alt="img5" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>Bundled Pattern&lt;/strong> combines two or more of the previously described patterns together by easily passing events sequentially between them. It resembles UNIX pipelines, where each function is small, precise and does one thing, but true power comes from chaining these together.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/fc8aa752-ef51-453f-a570-3b4485f4b24c/Screenshot_from_2022-09-06_14-28-33.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220906%2Fus-west-2%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20220906T112614Z&amp;amp;X-Amz-Expires=86400&amp;amp;X-Amz-Signature=e27314a11b27d0a8f1eda160733388842ce62fece1595ef21542426424c095b0&amp;amp;X-Amz-SignedHeaders=host&amp;amp;response-content-disposition=filename%20%3D%22Screenshot%2520from%25202022-09-06%252014-28-33.png%22&amp;amp;x-id=GetObject" alt="img6" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Authors show the time to start a lambda function(50-100ms) as a primary disadvantage. But lower prices for short running functions and better scalability are advantages.&lt;/p>
&lt;p>In later sections of the paper they describe a threat intelligence platform built upon the above mentioned design patterns, which is not interesting for our purpose.&lt;/p>
&lt;p>Authors also discuss some restrictions of current lambda design and offer possible solutions. Time bound execution is highlighted as one of the resource constraints and it can be avoided by splitting the original task across the multiple executions, but it is not possible for all workloads. They describe a proper solution as to either increase the execution time or to automatically pass state between executions so that the task can continue in another execution with the previous state. Lambda also suffers from lack of computing power. They argue that it would be better to have CPU limits configurable and support for GPUs in AWS Lambda. Moreover, lack of event tracing is emphasized by the authors.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.usenix.org/conference/hotcloud18/presentation/hong" target="_blank" rel="noopener">Go Serverless: Securing Cloud via Serverless Design Patterns&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>How to Read a Paper</title><link>https://vjabrayilov.github.io/post/howtoreadapaper/</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/post/howtoreadapaper/</guid><description>&lt;ul>
&lt;li>&lt;strong>Key idea:&lt;/strong> read the paper in up to &lt;em>3 passes&lt;/em>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>1st pass gives the general idea
&lt;ul>
&lt;li>5-10 mins&lt;/li>
&lt;li>get a bird&amp;rsquo;s-eye view and decide whether to do any more passes or not&lt;/li>
&lt;li>&lt;strong>Do the following&lt;/strong>
&lt;ol>
&lt;li>carefully read the &lt;em>title, abstract and introduction&lt;/em>&lt;/li>
&lt;li>read the &lt;em>section and sub-section headings&lt;/em>, but ignore everything else&lt;/li>
&lt;li>read the &lt;em>conclusions&lt;/em>&lt;/li>
&lt;li>glance over the &lt;em>references&lt;/em>, mentally ticking off the already read ones&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>at the end of this pass, &lt;em>five Cs&lt;/em> should be answered
&lt;ol>
&lt;li>&lt;em>Category&lt;/em>: What type of paper is this? A measurement paper? An analysis of an existing system? A description of a research prototype?&lt;/li>
&lt;li>&lt;em>Context&lt;/em>: Which other paper is it related to? Which theoretical bases were used to analyze the problem?&lt;/li>
&lt;li>&lt;em>Correctness&lt;/em>: Do the assumptions appear to be valid?&lt;/li>
&lt;li>&lt;em>Contributions&lt;/em>: What are the paper&amp;rsquo;s main contributions?&lt;/li>
&lt;li>&lt;em>Clarity&lt;/em>: Is the paper well written?&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>this pass is adequate for papers that aren&amp;rsquo;t in the research area, but someday prove relevant&lt;/li>
&lt;li>&lt;strong>Most reviewers make only one pass, take care to choose &lt;em>coherent section and sub-section titles&lt;/em> and write &lt;em>concise and comprehensive abstracts&lt;/em>.&lt;/strong> If a reviewer cannot understand the gist after one pass, most probably will be rejected; if a reader cannot understand the higlights of the paper after &lt;em>5 mins&lt;/em>, the paper will likely never be read.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>2nd pass helps to grasp the paper&amp;rsquo;s content, not the details
&lt;ul>
&lt;li>read the paper with greater care, but ignore details such as proofs&lt;/li>
&lt;li>&lt;strong>Do the following&lt;/strong>
&lt;ol>
&lt;li>Look carefully at the figures, diagrams and other illustrations in the paper. Pay special attention to graphs. Are the axes properly labeled? Are results shown with error bars, so that conclusions are statistically significant?&lt;/li>
&lt;li>Remember to mark relevant unread references for further reading&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>up to &lt;em>1 hour&lt;/em>&lt;/li>
&lt;li>should be able to &lt;em>summarize the main thrust&lt;/em> of the paper&lt;/li>
&lt;li>if not understood at this point, choose:
&lt;ul>
&lt;li>set the paper aside&lt;/li>
&lt;li>return to the paper later, perhaps after reading the background material&lt;/li>
&lt;li>persevere and go on to the 3rd pass&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>3rd pass helps to understand the paper in depth
&lt;ul>
&lt;li>attempt to &lt;em>virtually re-implement&lt;/em> the paper&lt;/li>
&lt;li>identify and challenge every assumption in every statement&lt;/li>
&lt;li>jot down ideas for future work&lt;/li>
&lt;li>&lt;em>4 or 5 hours&lt;/em> for beginners, &lt;em>an hour&lt;/em> for an experienced reader&lt;/li>
&lt;li>should be able to reconstruct the entire structure of the paper from memory, identify the strong and weak points.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://ccr.sigcomm.org/online/files/p83-keshavA.pdf" target="_blank" rel="noopener">http://ccr.sigcomm.org/online/files/p83-keshavA.pdf&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Kafka vs RabbitMQ</title><link>https://vjabrayilov.github.io/post/kafkavsrabbit/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/post/kafkavsrabbit/</guid><description>&lt;ul>
&lt;li>&lt;a href="#rabbitmq">RabbitMQ&lt;/a>&lt;/li>
&lt;li>&lt;a href="#kafka">Kafka&lt;/a>&lt;/li>
&lt;li>&lt;a href="#rabbitmq-architecture">RabbitMQ Architecture&lt;/a>&lt;/li>
&lt;li>&lt;a href="#kafka-architecture">Kafka Architecture&lt;/a>&lt;/li>
&lt;li>&lt;a href="#use-cases">Use cases&lt;/a>&lt;/li>
&lt;li>&lt;a href="#references">References&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="rabbitmq">RabbitMQ&lt;/h2>
&lt;ul>
&lt;li>supports :
&lt;ul>
&lt;li>AMQP : Advanced Message Queuing Protocol&lt;/li>
&lt;li>MQTT : MQ Telemetry Protocol&lt;/li>
&lt;li>STOMP : Streaming Text Oriented Messaging Protocol&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>is known as a &lt;em>hybrid&lt;/em> broker&lt;/li>
&lt;li>uses &lt;em>smart broker/dumb consumer&lt;/em> model&lt;/li>
&lt;/ul>
&lt;h2 id="kafka">Kafka&lt;/h2>
&lt;ul>
&lt;li>provides higher throughput, &lt;em>built-in partitioning, replication, and inherent fault-tolerance&lt;/em>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>There are 2 &lt;em>async&lt;/em> messagin patterns :&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Message Queue&lt;/p>
&lt;ul>
&lt;li>a creating app sends a msg to queue. When the consuming app is ready, it just connects to the queue and retrieves the msg, removing it from the queue.&lt;/li>
&lt;li>several consuming apps can exist, &lt;strong>each message is only consumed by one&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Publish/Subscribe (pub/sub)&lt;/p>
&lt;ul>
&lt;li>allows producers to publish msg&amp;rsquo;s which can be consumed by multiple consumer.&lt;/li>
&lt;li>if consuming apps are interested, they just subscribe to a channel&lt;/li>
&lt;li>used when a msg or event must trigger several actions&lt;/li>
&lt;li>unlike the message queue, pub/sub &lt;em>assures&lt;/em> that consuming apps rcv msg&amp;rsquo;s in the &lt;em>same order&lt;/em> as messaging system received them.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="rabbitmq-architecture">RabbitMQ Architecture&lt;/h2>
&lt;ul>
&lt;li>consists of
&lt;ul>
&lt;li>producers&lt;/li>
&lt;li>exchanges&lt;/li>
&lt;li>queues&lt;/li>
&lt;li>consumers&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> queues
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> msg |----&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> producer -----&amp;gt; exchange --|----&amp;gt; consumers
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |----&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> or other
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exchanges
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;em>queue&lt;/em> is a sequential data structure:
&lt;ul>
&lt;li>producers add to the end&lt;/li>
&lt;li>consumers get data from the top&lt;/li>
&lt;li>FIFO&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;em>msg exchange&lt;/em> determines routing
&lt;ul>
&lt;li>4 exchange types:
&lt;ul>
&lt;li>direct
&lt;ul>
&lt;li>can directly target msg&amp;rsquo;s to a particular queue
&lt;figure id="figure-direct-exchange">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://miro.medium.com/max/1400/1*_Jzl2o13xBPn3CsdATBaxw.png" alt="direct exchange" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
direct exchange
&lt;/figcaption>&lt;/figure>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>fanout
&lt;ul>
&lt;li>route msg&amp;rsquo;s to all available queues
&lt;figure id="figure-fanout-exchange">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://miro.medium.com/max/1400/1*Hn3SaZuE1o3C1-IayaU9AQ.png" alt="fanout exchange" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
fanout exchange
&lt;/figcaption>&lt;/figure>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>topic&lt;/li>
&lt;li>header&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="kafka-architecture">Kafka Architecture&lt;/h2>
&lt;ul>
&lt;li>consists of
&lt;ul>
&lt;li>producers&lt;/li>
&lt;li>consumers&lt;/li>
&lt;li>clusters&lt;/li>
&lt;li>brokers&lt;/li>
&lt;li>topics&lt;/li>
&lt;li>partitions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">producer --------&amp;gt; cluster -------&amp;gt; consumer
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://miro.medium.com/max/1376/1*TIKFG4HHYx4W6RbE1BWblA.png" alt="kafka architecture" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;hr>
&lt;h2 id="use-cases">Use cases&lt;/h2>
&lt;ul>
&lt;li>Rabbit MQ
&lt;ul>
&lt;li>complex routing - route msg&amp;rsquo;s among miltiple consuming apps, such as in a microservice architecture&lt;/li>
&lt;li>legacy applications&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://miro.medium.com/max/1400/1*Kyps08v9VSh5QwETNOVuHw.png" alt="rabbit use cases" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;ul>
&lt;li>Kafka
&lt;ul>
&lt;li>high-troughput activity tracking&lt;/li>
&lt;li>stream processing&lt;/li>
&lt;li>event sourcing&lt;/li>
&lt;li>log aggregation
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://miro.medium.com/max/1400/1*001aX2FBDS4qz8nPLNiXAg.png" alt="kafka use cases" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="references">References&lt;/h2>
&lt;p>&lt;a href="https://medium.com/@mbhanuka/kafka-vs-rabitmq-3ae75abe9c80" target="_blank" rel="noopener">https://medium.com/@mbhanuka/kafka-vs-rabitmq-3ae75abe9c80&lt;/a>&lt;/p></description></item><item><title>Levels Of Techie Enlightenment</title><link>https://vjabrayilov.github.io/post/lstechieenlightenment/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/post/lstechieenlightenment/</guid><description>&lt;p>3 levels of enlightenment:&lt;/p>
&lt;ul>
&lt;li>Level 0: The Newcomer
&lt;ul>
&lt;li>a ton of materials to master&lt;/li>
&lt;li>reaction: &lt;em>Overwhelmed&lt;/em>&lt;/li>
&lt;li>problem: lack of breadth&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Level 1: The Half-Expert
&lt;ul>
&lt;li>weakness finding machines&lt;/li>
&lt;li>reaction: &lt;em>dismissal and destruction&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Level 2: Chaotic times &amp;hellip;&lt;/li>
&lt;li>Level 3: Nirvana
&lt;ul>
&lt;li>people are able to provide and receive criticism without making it personal&lt;/li>
&lt;li>far more productive&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://hackingdistributed.com/2017/05/04/stages-of-enlightenment/" target="_blank" rel="noopener">https://hackingdistributed.com/2017/05/04/stages-of-enlightenment/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Metastable Failures in Distributed Systems</title><link>https://vjabrayilov.github.io/post/metastablefailures/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/post/metastablefailures/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;ul>
&lt;li>Interestingly, most features improving the efficiency or reliability are the main cause of &lt;em>metastable failures&lt;/em>.&lt;/li>
&lt;li>Trigger causes the open system (with an unctrolled source of load) to enter a &lt;strong>bad state&lt;/strong> persisting even after the removal of the trigger.&lt;/li>
&lt;li>Failures that are &lt;strong>resolved when the trigger is removed&lt;/strong> are not metastable.&lt;/li>
&lt;li>Recovery requires &lt;em>a strong corrective push&lt;/em>, e.g. rebooting or dramatically reducing the load.&lt;/li>
&lt;li>Lifecycle of a metastable failure:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> load rises trigger
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stable state ------------&amp;gt; vulnerable state --------&amp;gt; metastable state
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (still healthy)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>the vulnerable state is not an overloaded state; system can run for a long time here; but can get stuck in &lt;em>metastable state&lt;/em> w/o any increase in the load.&lt;/li>
&lt;li>interestingly most production systems prefers the vulnerable state since it has higher efficiency than the stable state.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;em>Feedback loop&lt;/em> sustains the failure until a corrective action is applied.&lt;/li>
&lt;/ul>
&lt;h2 id="case-studies">Case studies&lt;/h2>
&lt;ul>
&lt;li>Request Retries
&lt;ul>
&lt;li>Results in work amplification&lt;/li>
&lt;li>Consider a web application with db. Initially, system operates normally while load is just below a certain threshold. After a temporary network outage occurs and restores, retries are sent and this surge overloads the db. Overloaded db timeouts the upcoming queries and system will remain in metastable state untill the load is significantly reduced or timeout(retry) policy of db query changed.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Look-aside Cache
&lt;ul>
&lt;li>If cache is lost in the vulnerable state, db will be pushed to overloaded state. Cache will remain empty, system is trapped in metastable failure state;
&lt;ul>
&lt;li>low cache hit -&amp;gt; slow db response -&amp;gt; prevents filling the cache&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Slow Error Handling
&lt;ul>
&lt;li>Error handling has its cost and it can be a significant cost&lt;/li>
&lt;li>Trigger causes the system to run out of the resources used by error handling code, and error handling will make the shortage more severe.&lt;/li>
&lt;li>&lt;strong>??? &amp;ndash; to think&lt;/strong> Is the following considered? &amp;ndash;&amp;gt; An error occurs(like wrong input), error handling code makes the resources to run out, normal operations are deprived of resources resulting in additional errors(exceptions), which draw the system to a metastable state.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Link Imbalance
&lt;ul>
&lt;li>a very interesting and solid example; both requiring network and application layer collaboration to fix&lt;/li>
&lt;li>a complex and well designed hashing algorithm routes the requests; but the cache miss of a single shard in the application level increases the requests to the db. There is a connection pool with MRU policy, each spike of misses reaarranges the connection pool so that highest latency links are at the top and they will be used; resulting in further congestion.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="approaches-to-handling-metastability">Approaches to Handling Metastability&lt;/h2>
&lt;ul>
&lt;li>Trigger vs Root Cause: Sustaining feedback loop is the root cause rather than the trigger itself. Different triggers can result in the same failure state; hence solution is to address the sustaining effect.&lt;/li>
&lt;li>Change of Policy during Overload: e.g., make some failing requests to succeed.&lt;/li>
&lt;li>Prioritization: e.g., give priority to retries requests rather than new ones.&lt;/li>
&lt;li>Stress tests &lt;strong>TODO: read the Kraken paper&lt;/strong>&lt;/li>
&lt;li>Organizational incentives&lt;/li>
&lt;li>Fast Error Paths&lt;/li>
&lt;li>Outlier Hygiene: same root cause can manfiest earlier as latency outlier or a cluster of errrors.&lt;/li>
&lt;li>Autoscaling&lt;/li>
&lt;/ul>
&lt;h2 id="research-directions">Research Directions&lt;/h2>
&lt;ul>
&lt;li>2 main goals:
&lt;ul>
&lt;li>designing systems that avoid metastable failures while operating efficiently&lt;/li>
&lt;li>developing mechanisms to recover from metastable failures as quickly as possible in cases that cannot be avoided&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Try to weaken the strongest feedback loops, discover about characteristic metric, using them generate warning signs;&lt;/li>
&lt;li>Learning the hidden capacity of the underlying system can help to take preventive actions.&lt;/li>
&lt;/ul>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://sigops.org/s/conferences/hotos/2021/papers/hotos21-s11-bronson.pdf" target="_blank" rel="noopener">https://sigops.org/s/conferences/hotos/2021/papers/hotos21-s11-bronson.pdf&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>An example preprint / working paper</title><link>https://vjabrayilov.github.io/publication/preprint/</link><pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/publication/preprint/</guid><description>&lt;div class="alert alert-note">
&lt;div>
Create your slides in Markdown - click the &lt;em>Slides&lt;/em> button to check out the example.
&lt;/div>
&lt;/div>
&lt;p>Supplementary notes can be added here, including &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">code, math, and images&lt;/a>.&lt;/p></description></item><item><title>Slides</title><link>https://vjabrayilov.github.io/slides/example/</link><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/slides/example/</guid><description>&lt;h1 id="create-slides-in-markdown-with-wowchemy">Create slides in Markdown with Wowchemy&lt;/h1>
&lt;p>&lt;a href="https://wowchemy.com/" target="_blank" rel="noopener">Wowchemy&lt;/a> | &lt;a href="https://wowchemy.com/docs/content/slides/" target="_blank" rel="noopener">Documentation&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="features">Features&lt;/h2>
&lt;ul>
&lt;li>Efficiently write slides in Markdown&lt;/li>
&lt;li>3-in-1: Create, Present, and Publish your slides&lt;/li>
&lt;li>Supports speaker notes&lt;/li>
&lt;li>Mobile friendly slides&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="controls">Controls&lt;/h2>
&lt;ul>
&lt;li>Next: &lt;code>Right Arrow&lt;/code> or &lt;code>Space&lt;/code>&lt;/li>
&lt;li>Previous: &lt;code>Left Arrow&lt;/code>&lt;/li>
&lt;li>Start: &lt;code>Home&lt;/code>&lt;/li>
&lt;li>Finish: &lt;code>End&lt;/code>&lt;/li>
&lt;li>Overview: &lt;code>Esc&lt;/code>&lt;/li>
&lt;li>Speaker notes: &lt;code>S&lt;/code>&lt;/li>
&lt;li>Fullscreen: &lt;code>F&lt;/code>&lt;/li>
&lt;li>Zoom: &lt;code>Alt + Click&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://revealjs.com/pdf-export/" target="_blank" rel="noopener">PDF Export&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="code-highlighting">Code Highlighting&lt;/h2>
&lt;p>Inline code: &lt;code>variable&lt;/code>&lt;/p>
&lt;p>Code block:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">porridge&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;blueberry&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">porridge&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;blueberry&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Eating...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="math">Math&lt;/h2>
&lt;p>In-line math: $x + y = z$&lt;/p>
&lt;p>Block math:&lt;/p>
&lt;p>$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p>
&lt;hr>
&lt;h2 id="fragments">Fragments&lt;/h2>
&lt;p>Make content appear incrementally&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{{% fragment %}} One {{% /fragment %}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{% fragment %}} **Two** {{% /fragment %}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{% fragment %}} Three {{% /fragment %}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Press &lt;code>Space&lt;/code> to play!&lt;/p>
&lt;span class="fragment " >
One
&lt;/span>
&lt;span class="fragment " >
&lt;strong>Two&lt;/strong>
&lt;/span>
&lt;span class="fragment " >
Three
&lt;/span>
&lt;hr>
&lt;p>A fragment can accept two optional parameters:&lt;/p>
&lt;ul>
&lt;li>&lt;code>class&lt;/code>: use a custom style (requires definition in custom CSS)&lt;/li>
&lt;li>&lt;code>weight&lt;/code>: sets the order in which a fragment appears&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="speaker-notes">Speaker Notes&lt;/h2>
&lt;p>Add speaker notes to your presentation&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">{{% speaker_note %}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> Only the speaker can read these notes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> Press &lt;span class="sb">`S`&lt;/span> key to view
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {{% /speaker_note %}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Press the &lt;code>S&lt;/code> key to view the speaker notes!&lt;/p>
&lt;aside class="notes">
&lt;ul>
&lt;li>Only the speaker can read these notes&lt;/li>
&lt;li>Press &lt;code>S&lt;/code> key to view&lt;/li>
&lt;/ul>
&lt;/aside>
&lt;hr>
&lt;h2 id="themes">Themes&lt;/h2>
&lt;ul>
&lt;li>black: Black background, white text, blue links (default)&lt;/li>
&lt;li>white: White background, black text, blue links&lt;/li>
&lt;li>league: Gray background, white text, blue links&lt;/li>
&lt;li>beige: Beige background, dark text, brown links&lt;/li>
&lt;li>sky: Blue background, thin dark text, blue links&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>night: Black background, thick white text, orange links&lt;/li>
&lt;li>serif: Cappuccino background, gray text, brown links&lt;/li>
&lt;li>simple: White background, black text, blue links&lt;/li>
&lt;li>solarized: Cream-colored background, dark green text, blue links&lt;/li>
&lt;/ul>
&lt;hr>
&lt;section data-noprocess data-shortcode-slide
data-background-image="/media/boards.jpg"
>
&lt;h2 id="custom-slide">Custom Slide&lt;/h2>
&lt;p>Customize the slide style and background&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">{{&lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nt">slide&lt;/span> &lt;span class="na">background-image&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/media/boards.jpg&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{&lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nt">slide&lt;/span> &lt;span class="na">background-color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;#0000FF&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{&lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nt">slide&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;my-style&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="custom-css-example">Custom CSS Example&lt;/h2>
&lt;p>Let&amp;rsquo;s make headers navy colored.&lt;/p>
&lt;p>Create &lt;code>assets/css/reveal_custom.css&lt;/code> with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">reveal&lt;/span> &lt;span class="nt">section&lt;/span> &lt;span class="nt">h1&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">reveal&lt;/span> &lt;span class="nt">section&lt;/span> &lt;span class="nt">h2&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">reveal&lt;/span> &lt;span class="nt">section&lt;/span> &lt;span class="nt">h3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">navy&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h1 id="questions">Questions?&lt;/h1>
&lt;p>&lt;a href="https://discord.gg/z8wNYzb" target="_blank" rel="noopener">Ask&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://wowchemy.com/docs/content/slides/" target="_blank" rel="noopener">Documentation&lt;/a>&lt;/p></description></item><item><title>Replicated Store</title><link>https://vjabrayilov.github.io/project/example/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/project/example/</guid><description>&lt;!-- Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.
Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.
Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.
Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.
Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at. --></description></item><item><title>An example journal article</title><link>https://vjabrayilov.github.io/publication/journal-article/</link><pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/publication/journal-article/</guid><description>&lt;div class="alert alert-note">
&lt;div>
Click the &lt;em>Cite&lt;/em> button above to demo the feature to enable visitors to import publication metadata into their reference management software.
&lt;/div>
&lt;/div>
&lt;div class="alert alert-note">
&lt;div>
Create your slides in Markdown - click the &lt;em>Slides&lt;/em> button to check out the example.
&lt;/div>
&lt;/div>
&lt;p>Supplementary notes can be added here, including &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">code, math, and images&lt;/a>.&lt;/p></description></item><item><title/><link>https://vjabrayilov.github.io/admin/config.yml</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vjabrayilov.github.io/admin/config.yml</guid><description/></item></channel></rss>